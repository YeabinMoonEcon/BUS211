if (major == "Chemistry") {print("good")}  +
else {print('k')}
if (major == "Chemistry") {print("good")
} else {print("bad")}
x <- 7
x > 5 & x < 10
x > 5 && x < 10
a <- 1:3
b <- 4:6
a>2
a>2 && b >5
b >5
a>2
a>2 | b >5
a>2 & b >5
a>2 && b >5
library(tidyverse)
date1 <- "20/04/21"
date2 <- "04-21-20"
ymd(date1)
library(lubridate)
ymd(date1)
mdy(date1)
ymd(date1)
mdy(date1)
mdy(date2)
date1 <- "01011970" # should be January 1, 1970
date2 <- "2019-03-04" # should be March 4, 2019
date_standardized1 <- mdy(date1)
date_standardized2 <- ymd(date2)
date_standardized1
datetime1 <- "01-01-1970-00-00-00" # should be January 1, 1970 at midnight
datetime2 <- "2019-03-14 1:59 AM" # should be March 14, 2019, 1:59 AM
mdy(datetime1)
datetime1 <- "01-01-1970-00-00-00" # should be January 1, 1970 at midnight
datetime2 <- "2019-03-14 1:59 AM" # should be March 14, 2019, 1:59 AM
mdy(datetime1)
mdy_hms(datetime1)
ymd_hm(datetime2)
Sys.time()
now <- Sys.time()
now %>% ymd_hms()
now <- Sys.time()
now %>% ymd_hms()
now %>% ymd_hms() %>% as.numeric()
ymd("2020-04-21")
date<-ymd("2020-04-21")
date[year]
year(date)
month(date)
day(date)
wday(date)
Sys.time()
ymd_hms(Sys.time())
date<- ymd_hms(Sys.time())
month(date)
wday(date)
wday(date, label = TRUE)
yday(date, label = TRUE)
yday(date)
now <- Sys.time()
now
ymd("2015-03-01")
now - ymd("2015-03-01")
now
ymd("2015-03-01")
ymd(now)
duration(day = 1, hour = 1)
duration(day = 1, hour = 1, minute = 30
duration(day = 1, hour = 1, minute = 300)
duration(day = 1, hour = 1, minute = 300)
now+duration(day = 1, hour = 1, minute = 300)
c(1,2,2)
1:10
rep(4, times = 10)
seq1 <- rep(4, times = 10)
seq2 <- 1:12
seq(from = 2.0, to = 5.50, by =0.25)
seq3 <- seq(from = 2.0, to = 5.50, by = 0.25)
math_grades <- c(92L, 87L, 85L)
exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
math_grades
exam_grades
math_grades[1]
exam_grades[2,3,6]
2,3,6
exam_grades[c(2,3,6)]
3:7
exam_grades[3:7]
exam_grades[2,3,6]
2,3,6
3:7
1989
class(1989)
1989L
class(1989L)
class(1L + 1)
math_grades <- c(92L, 87L, 85L)
exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
is_stem_classes <- c(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)
math_grades[2]
math_grades[2] <- 80L
math_grades
exam_grades
exam_grades[is_stem_classes]
exam_grades[is_stem_classes] <- 99
exam_grades[is_stem_classes]
exam_grades
math_grades <- c(92L, 87L, 85L)
exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
math_grades[-1]
math_grades[-1]
new_math_grades <- math_grades[-1]
math_grades
exam_grades[c(-3,-5,-7)]
exam_grades >= 90
exam_grades[exam_grades >= 90]
exam_grades    <- c(92, 90, 84, 95, 77, 92, 85)
homework_grades<- c(87, 81, 95, 86, 85, 90, 88)
project_grades <- c(85, 92, 79, 93, 90, 91, 95)
exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
class_names <- c("math", "chemistry", "writing", "art", "history", "music", "physical_education")
exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
names(exam_grades)
names(exam_grades)<-class_names
exam_grades
exam_grades
exam_grades[1]
exam_grades['math']
exam_grades[92]
vector_1 <- c(1, 4, 5, 9)
vector_2 <- 1:12
vector_3 <- seq(from = 2.0, to = 5.50, by = 0.25)
matrix_1 <- matrix(vector_1, nrow = 2, ncol = 2)
matrix_1
matrix_2 <- matrix(vector_2, nrow = 3)
matrix_2
matrix_3 <- matrix(vector_3, nrow = 5, byrow = TRUE)
matrix_3
matrix(vector_3, nrow = 5, byrow = F)
world_rank <- c(1, 2, 3, 4, 5, 6)
quality_of_education <- c(1, 9, 3, 2, 7, 13)
influence <- c(1, 3, 2, 6, 12, 13)
broad_impact <- c(1, 4, 2, 13, 9, 12)
patents <- c(3, 10, 1, 48, 15, 4)
colum_stack <- cbind(world_rank,quality_of_education,influence,broad_impact,patents)
row_stack <- rbind(world_rank,quality_of_education,influence,broad_impact,patents)
colum_stack
school_names <- c("harvard", "stanford", "MIT", "cambridge", "oxford", "columbia")
rownames(colum_stack) <- school_names
university_matrix <- colum_stack
university_matrix
university_matrix[columbia, ]
university_matrix['columbia', ]
university_matrix['columbia', 'influence']
university_matrix['cambridge',]
university_matrix[,'world_rank']
university_matrix
university_matrix[c('harvard','MIT'),]
university_matrix[c('harvard','MIT','cambridge'),]
university_matrix[c('harvard','MIT','cambridge'),c('world_rank','broad_impact')]
usa_universities <- c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE)
university_matrix[usa_universities,]
university_matrix[usa_universities,c('world_rank','patents')]
university_matrix
tuition <- c(43280, 45000, 45016, 49350, 28450, 55161)
cbind(university_matrix,tuition)
new_matrix <- cbind(university_matrix,tuition)
new_matrix
california <- c(7, 5, 4, 7, 29, 43176)
rbind(new_matrix, california)
new_matrix <- rbind(new_matrix, california)
new_matrix
complete_university_matrix <- new_matrix
complete_university_matrix
complete_university_matrix[,-1]
complete_university_matrix[,c(-'world_rank')]
complete_university_matrix[,c('world_rank')]
complete_university_matrix[,c(-1)]
complete_university_matrix[,c(-2,-5)]
complete_university_matrix[broad_impact <= 10,c(-2,-5)]
complete_university_matrix['harvard',]
mean(complete_university_matrix['harvard',])
mean(complete_university_matrix['harvard',-1])
complete_university_matrix['harvard',-1]
complete_university_matrix['harvard',-6]
mean(complete_university_matrix['harvard',-6])
complete_university_matrix[,-6]
rowMeans(complete_university_matrix[,-6])
colMeans(complete_university_matrix[,-6])
list(“ballroom dancing”, “rugby”, “bird watching”, “pottery”)
list("ballroom dancing", "rugby", "bird watching", "pottery")
university_clubs <- list("ballroom dancing", "rugby", "bird watching", "pottery")
mit_list<- list("MIT", c(3,3,2,2,1), TRUE)
mit_list
mit_named_list <- list(name = "MIT", ranking= c(3,3,2,2,1), is_in_usa=  TRUE)
mit_named_list
library(readr)
complaints <- read_csv("Downloads/complaints.csv")
View(complaints)
library(tidyverse)
setwd("~/Downloads/pattern")
setwd("~/Downloads/pattern")
library(RSQLite)
con <- dbConnect(SQLite(),
dbname = "tweater",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
dbListTables(con)
con <- dbConnect(RMySQL::MySQL(),
dbname = "tweater",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
dbname = "tweater",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
con <- dbConnect(RMySQL::MySQL(),
dbname = "tweater",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
setwd("~/Documents/ibs_course/BUS211/data")
df <- read_csv('wnba.csv')
setwd("~/Documents/ibs_course/BUS211/data")
library(tidyverse)
df <- read_csv('wnba.csv')
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
set.seed(1)
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
set.seed(1)
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
set.seed(1)
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
df %>%
# Split: stratify by player position
group_by(Pos) %>%
# Apply: sample 10 observations for each player position stratum
sample_n(10) %>%
# Apply & combine: calculate average points scored for each stratum, combine results
summarize(mean_pts = mean(PTS))
df %>%
mutate(games_stratum = cut(Games_Played, breaks = 3)) %>%
group_by(games_stratum) %>%
summarize(n = n()) %>%
mutate(percentage = n / sum(n) * 100) %>%
arrange(desc(percentage))
wnba <- df
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
sample_number <- 1:100
df <- tibble(x = sample_number, y = mean_points)
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)
sample_mean <- function(x){
under_12 <- wnba %>%
filter(Games_Played <= 12) %>%
sample_n(1)
btw_13_22 <- wnba %>%
filter(Games_Played > 12 & Games_Played <= 22) %>%
sample_n(2)
over_22 <- wnba %>%
filter(Games_Played > 22) %>%
sample_n(7)
combined <- bind_rows(under_12, btw_13_22, over_22)
mean(combined$PTS)
}
sample_number <- 1:100
mean_points_season <- map_dbl(sample_number, sample_mean)
df <- tibble(sample_number, mean_points_season)
ggplot(data = df) +
aes(x = sample_number, y = mean_points_season) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS), color = "blue") +
ylim(80, 320)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
sample_number <- 1:100
df <- tibble(x = sample_number, y = mean_points)
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+geom_tile('SSR')
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+geom_title('SSR')
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
sample_number <- 1:100
df <- tibble(x = sample_number, y = mean_points)
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+geom_title('SSR')
wnba <- df
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
wnba <- df
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
wnba <- df
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
wnba <- df
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
wnba <- read_csv('wnba.csv')
set.seed(1)
mean_points <- replicate(n = 100,
expr = mean(sample(wnba$PTS, size = 10)))
sample_number <- 1:100
df <- tibble(x = sample_number, y = mean_points)
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+labs(title = 'SSR')
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+labs(title = 'SRS')
ggplot(data = df,
aes(x = sample_number, y = mean_points)) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS),
color = "blue") +
ylim(90, 310)+labs(title = 'SRS')
sample_mean <- function(x){
under_12 <- wnba %>%
filter(Games_Played <= 12) %>%
sample_n(1)
btw_13_22 <- wnba %>%
filter(Games_Played > 12 & Games_Played <= 22) %>%
sample_n(2)
over_22 <- wnba %>%
filter(Games_Played > 22) %>%
sample_n(7)
combined <- bind_rows(under_12, btw_13_22, over_22)
mean(combined$PTS)
}
sample_number <- 1:100
mean_points_season <- map_dbl(sample_number, sample_mean)
df <- tibble(sample_number, mean_points_season)
ggplot(data = df) +
aes(x = sample_number, y = mean_points_season) +
geom_point() +
geom_hline(yintercept = mean(wnba$PTS), color = "blue") +
ylim(80, 320)+labs(title = 'Stratified')
library(tidyverse)
0:1
sample(0:1, size = 3, replace = T, prob = c(0.8,2))
sample(0:1, size = 3, replace = T, prob = c(0.8,.2))
sample(0:1, size = 3, replace = T, prob = c(0.8,.2))
n_size = 10
sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
n_size <- 100
t_sample <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
t_sample
mu <- mean(t_sample)
mu
population <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
mu <- mean(t_sample)
population
mean_points <- replicate(n = 100,
num = mean(sample(population, size = 10)))
mean_points <- replicate(n = 100,
num = mean(sample(population, size = 10)))
mean_points <- replicate(n = 100,
expr = mean(sample(population, size = 10)))
mean_points
mean_points <- replicate(n = 100,
expr = (mean(sample(population, size = 10)) - mu)/sd(sample(population, size = 10))
)
mean_points
n_size <- 1000
population <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
mu <- mean(t_sample)
mean_points <- replicate(n = 100,
expr = (mean(sample(population, size = 10)) - mu)/sd(sample(population, size = 10))
)
mean_points
sd(sample(population, size = 10)
sd(sample(population, size = 10))
sd(sample(population, size = 10))
sd(sample(population, size = 10))
sd(sample(population, size = 10))
sd(sample(population, size = 10))
sd(sample(population, size = 10))
mean_points <- replicate(n = 1000,
expr = (mean(sample(population, size = 10)) - mu)/sd(sample(population, size = 10))
)
mean_points
mean_points
mean_points <- replicate(n = 1000000,
expr = (mean(sample(population, size = 40)) - mu)/sd(sample(population, size = 40))
)
mean_points
mean_points <- replicate(n = 100000,
expr = (mean(sample(population, size = 40)) - mu)/sd(sample(population, size = 40))
)
mean_points
a<-sd(sample(population, size = 10))
hist(mean_points)
n_size <- 10
population <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
mu <- mean(t_sample)
mean_points <- replicate(n = 100000,
expr = (mean(sample(population, size = 10)) - mu)/sd(sample(population, size = 10))
)
mean_points
hist(mean_points)
n_size <- 1000000
population <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
mu <- mean(t_sample)
mean_points <- replicate(n = 100000,
expr = (mean(sample(population, size = 10)) - mu)/sd(sample(population, size = 10))
)
mean_points
hist(mean_points)
population <- sample(0:1, size = n_size, replace = T, prob = c(0.8,.2))
hist(population)
mean_points <- replicate(n = 1000,
expr = (mean(sample(population, size = 100)) - mu)/sd(sample(population, size = 100))
)
mean_points
hist(mean_points)
hist(mean_points, title = 'hi')
hist(population)
hist(population)
t_stat_dist <- replicate(n = 1000,
expr = (mean(sample(population, size = 100)) - mu)/sd(sample(population, size = 100))
)
hist(t_stat_dist)
